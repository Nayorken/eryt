package com.mycompany.myapp;

import com.codename1.components.Accordion;
import com.codename1.components.FloatingActionButton;
import com.codename1.components.FloatingHint;
import com.codename1.components.MultiButton;
import com.codename1.components.OnOffSwitch;
import com.codename1.components.SpanLabel;
import com.codename1.components.Switch;
import com.codename1.components.ToastBar;
import com.codename1.components.ToastBar.Status;
import static com.codename1.ui.CN.*;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import java.io.IOException;
import com.codename1.ui.Toolbar;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.ButtonGroup;
import com.codename1.ui.CheckBox;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Font;
import com.codename1.ui.RadioButton;
import com.codename1.ui.Slider;
import com.codename1.ui.SwipeableContainer;
import com.codename1.ui.Tabs;
import com.codename1.ui.TextComponent;
import com.codename1.ui.TextField;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.layouts.TextModeLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.table.TableLayout;
import java.util.Date;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");      
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        //TIPO DE LAYOUT 1
        
        /*Form hi = new Form("FlowLayout", new FlowLayout(CENTER, CENTER));
        hi.addAll(new Label("Primeiro"), new Label(" Segundo"), new Label("Terceiro "), new Label("Quarto "), new Label("Quinto"));
        hi.show();*/
        
        //exercicio 1
        
        /*
        Form hi = new Form("Box Y Layout", new BoxLayout(BoxLayout.Y_AXIS));
        hi.addAll(new Label("Primeiro"), new Label("Segundo"), new Label("Terceiro"), new Label("Quarto"), new Label("Quinto"));
        Container c = new Container(new BorderLayout());
        c.addComponent(BorderLayout.CENTER, new Button("1"));
        c.addComponent(BorderLayout.NORTH, new Button("2"));
        c.addComponent(BorderLayout.SOUTH, new Button("3"));
        c.addComponent(BorderLayout.WEST, new Button("4"));
        c.addComponent(BorderLayout.EAST, new Button("5"));
        hi.add(c);
        hi.show();*/
        
        //TIPO DE LAYOUT 3
        
        /*Form hi = new Form("Border Layout", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER));
        hi.add(BorderLayout.CENTER, new Label("CENTER")).
                add(BorderLayout.SOUTH, new Label("SOUTH")).
                add(BorderLayout.NORTH, new Label("NORTH")).
                add(BorderLayout.EAST, new Label("EAST")).
                add(BorderLayout.WEST, new Label("WEST"));
        hi.show();
        */
        
        //TIPO DE LAYOUT 4  |GRID LAYOUT|
        /*
        Form hi = new Form("Grid Layout 2x2", new GridLayout(2,2));
        hi.add(new Label("First"));
        hi.add(new Label("Second"));
        hi.add(new Label("Third"));
        hi.add(new Label("Fourth"));
        hi.add(new Label("Fith"));
        hi.show();
        */
        
        //TIPO DE LAYOUT 5 |TABLE LAYOUT|
        /*
        Form hi = new Form ("Table layout 2x2", new TableLayout(3,2));
        hi.add(new Label("First"));
        hi.add(new Label("Second"));
        hi.add(new Label("Third"));
        hi.add(new Label("Fourth"));
        hi.add(new Label("Fith"));
        hi.show();
        */
        
        //TIPO DE LAYOUT 6 |TEXT MODE  LAYOUT|
        /*TextModeLayout tl = new TextModeLayout(3,2);
        Form f = new Form("Pixel Perfect", tl);
        TextComponent title = new TextComponent().label("Title");
        TextComponent price = new TextComponent().label("Price");
        TextComponent location = new TextComponent().label("Location");
        TextComponent description = new TextComponent().label("Description").multiline(true);
        f.add(tl.createConstraint().horizontalSpan(2), title);
        f.add(tl.createConstraint().widthPercentage(30), price);
        f.add(tl.createConstraint().widthPercentage(70), location);
        f.add(tl.createConstraint().horizontalSpan(2), description);
        f.setEditOnShow(title.getField());
        f.show();*/
        
        //EXERCICIO 2
        /*
        Form hi = new Form("Border Layout", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER));
        Container c = new Container(new BorderLayout());
        c.addComponent(BorderLayout.CENTER, new Button("1"));
        c.addComponent(BorderLayout.NORTH, new Button("2"));
        c.addComponent(BorderLayout.SOUTH, new Button("3"));
        c.addComponent(BorderLayout.WEST, new Button("4"));
        c.addComponent(BorderLayout.EAST, new Button("5"));
        hi.add(BorderLayout.CENTER, c).
                add(BorderLayout.SOUTH, new Label("SOUTH")).
                add(BorderLayout.NORTH, new Label("NORTH")).
                add(BorderLayout.EAST, new Label("EAST")).
                add(BorderLayout.WEST, new Label("WEST"));
        hi.show();
        */
        
        //EXERCICIO 3
        /*
        Form hi = new Form("Border Layout", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER));
        Container c2 = new Container(new BorderLayout());
        c2.addComponent(BorderLayout.CENTER, new Button("1"));
        c2.addComponent(BorderLayout.NORTH, new Button("2"));
        c2.addComponent(BorderLayout.SOUTH, new Button("3"));
        c2.addComponent(BorderLayout.WEST, new Button("4"));
        c2.addComponent(BorderLayout.EAST, new Button("5"));
        
        Container c = new Container(new BorderLayout());
        c.addComponent(BorderLayout.CENTER, c2);
        c.addComponent(BorderLayout.NORTH, new Button("2"));
        c.addComponent(BorderLayout.SOUTH, new Button("3"));
        hi.add(BorderLayout.CENTER, c).
                add(BorderLayout.SOUTH, new Label("SOUTH")).
                add(BorderLayout.NORTH, new Label("NORTH")).
                add(BorderLayout.EAST, new Label("EAST")).
                add(BorderLayout.WEST, new Label("WEST"));
        hi.show();
        */
        
        //LAYERED LAYOUT
        
        /*
        Form hi = new Form("LayeredLayout");
        int w = Math.min(Display.getInstance().getDisplayWidth(),Display.getInstance().getDisplayHeight());
        Button settings = new Button("");
        Style settingsStyle = settings.getAllStyles();
        settingsStyle.setFgColor(0xFD6E8A);
        settingsStyle.setBorder(null);
        settingsStyle.setBgColor(0xECE59A);
        settingsStyle.setBgTransparency(255);
        settingsStyle.setFont(settings.getUnselectedStyle().getFont().derive(w / 3,Font.STYLE_PLAIN));
        FontImage.setMaterialIcon(settings, FontImage.MATERIAL_SETTINGS);
        Button close = new Button("");
        close.setUIID("Container");
        close.getAllStyles().setFgColor(0xFD6E8A);
        FontImage.setMaterialIcon(close, FontImage.MATERIAL_CLOSE);
        hi.add(LayeredLayout.encloseIn(settings, FlowLayout.encloseRight(close)));
        hi.show();
        */
        
        /*checkboxes e radiobuttons*/
        /*
        Form hi = new Form("Componentes");
        Style s = UIManager.getInstance().getComponentStyle("Title");
        FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_VIDEO_LIBRARY, s);
        
        CheckBox cb1 = new CheckBox("Checkbox com icon", icon);
        cb1.setSelected(true);
        CheckBox cb2 = new CheckBox("Checkbox1 com icon", icon);
        CheckBox cb3 = new CheckBox("Checkbox2 com icon", icon);
        cb2.setOppositeSide(true);
        cb3.setOppositeSide(false);
        
        RadioButton rb1 = new RadioButton("Radio 1");
        RadioButton rb2 = new RadioButton("Radio 2");
        RadioButton rb3 = new RadioButton("Radio 3", icon);
        new ButtonGroup(rb1, rb2, rb3);
        rb2.setSelected(true);
        
        hi.add(cb1).add(cb2).add(cb3).add(rb1).add(rb2).add(rb3);
        hi.show();
        */
        
        
        //COMPONENTES - SWITCH
        /*
        Form hi = new Form("Componentes");
        Label lbl = new Label("Activar alarme");
        Switch onOff = new Switch();
        hi.addAll(lbl,onOff);
        hi.show();
             */
        
        
        /*  COMPONENTES - PICKER
        
        
        Form hi = new Form("Picker", new BoxLayout(BoxLayout.Y_AXIS));
        Picker datePicker = new Picker();
        datePicker.setType(Display.PICKER_TYPE_DATE);
        datePicker.setDate(new Date());

        Picker datetimePicker = new Picker();
        datetimePicker.setType(Display.PICKER_TYPE_DATE_AND_TIME);
        datetimePicker.setDate(new Date());

        Picker timePicker = new Picker();
        timePicker.setType(Display.PICKER_TYPE_TIME);
        timePicker.setTime(10 * 60);

        Picker stringPicker = new Picker();
        stringPicker.setType(Display.PICKER_TYPE_STRINGS);
        stringPicker.setStrings("A Game of Thrones", "A Clash Of Kings", "A Storm Of Swords", "A Feast For Crows", "A Dance With Dragons", "The Winds of Winter", "A Dream of Spiring");
        stringPicker.setSelectedString("A Game of Thrones");

        hi.addAll(datePicker,datetimePicker,timePicker,stringPicker);
        hi.show();
        */
        /*
        Form hi = new Form("Componentes");
        Slider sld = new Slider();
        sld.setEditable(true);
        sld.setMinValue(0);
        sld.setMaxValue(100);
        sld.setRenderPercentageOnTop(true);
        hi.addAll(sld);
        hi.show();*/
        
        
       //COMPONENTES - TABS
       /*
       Form hi = new Form("Tabs", new BorderLayout());
       Tabs t = new Tabs();
       Style s = UIManager.getInstance().getComponentStyle("Tab");
       FontImage icon1 = FontImage.createMaterial(FontImage.MATERIAL_QUESTION_ANSWER, s);
       
       Container container1 = BoxLayout.encloseY(new Label("Label 1"), new Label("Label 2"));
       t.addTab("Tab1", icon1, container1);
       t.addTab("Tab2", new SpanLabel("Texto no Tab"));
       hi.add(BorderLayout.CENTER, t);
       hi.show();
       */
       
       
       
       //COMPONENTES - ACCORDION
      /*
       Form f = new Form("Accordion", new BoxLayout(BoxLayout.Y_AXIS));
       f.setScrollableY(true);
       
       Accordion accr = new Accordion();
       accr.addContent("Item 1", new SpanLabel("Sou de braga olé, não gosto de futebol"));
       accr.addContent("Item 2", new SpanLabel("O benfica é o maior ou pior de Portugal, não quero saber"));
       accr.addContent("Item 3", BoxLayout.encloseY(new Label("Label"), new TextField(), new Button("Button"), new CheckBox("CheckBox")));
       
       f.add(accr);
       f.show();
        */
       
       
       
       
       //COMPONENTES - FLOATION ACTION BUTTON
       /*
       Form f = new Form("Floating Action Button", new BoxLayout(BoxLayout.Y_AXIS));
        f.setScrollableY(true);
        FloatingActionButton fab = FloatingActionButton.createFAB(FontImage.MATERIAL_ADD);
        fab.createSubFAB(FontImage.MATERIAL_PEOPLE, "");
        fab.createSubFAB(FontImage.MATERIAL_IMPORT_CONTACTS, "");
        fab.bindFabToContainer(f.getContentPane());
        f.show();
        */
       
       
       
       //COMPONENTES -  BADGE
       /*
        Form hi = new Form("Badge");

        Button chat = new Button("");
        chat.setMaterialIcon(FontImage.MATERIAL_CHAT, 7);
        //FontImage.setMaterialIcon(chat, FontImage.MATERIAL_CHAT, 7);
        
        FloatingActionButton badge = FloatingActionButton.createBadge("33");
        hi.add(badge.bindFabToContainer(chat, Component.RIGHT, Component.TOP));

        TextField changeBadgeValue = new TextField("33");
        
        changeBadgeValue.addDataChangedListener((i, ii) -> {
	badge.setText(changeBadgeValue.getText());
	badge.getParent().revalidate();
});
        hi.add(changeBadgeValue);
        hi.show();
*/
       
 
 
       //COMPONENTES - TOASTBAR
     /*
       final Form f = new Form("ToastBar");
       
       Button btn2 = new Button("Iniciar");
       btn2.addActionListener((i)->{
       Status status = ToastBar.getInstance().createStatus();
       status.setMessage("Hello world");
       status.setExpires(3000);
       status.show();
       
       });
       f.add(btn2);
       f.show();       
*/
       
       
       /*
        status.setMessage("Hello world");
	status.setShowProgressIndicator(true);
	status.show();
       */
       
       /*
       Status status = ToastBar.getInstance().createStatus();
       status.setMessage("Hello world");
       status.setExpires(3000);
       status.show();
       */
       
       /*
       //COMPONENTE - FLOATING HINT
       Form hi = new Form("Floating hint", BoxLayout.y());
       TextField first = new TextField("", "Primeira Label");
       TextField second = new TextField("", "Segunda Label");
       hi.add(new FloatingHint(first)).
               add(new FloatingHint(second)).
               add(new Button("OK"));
       hi.show();
*/
       
       //COMPONENTE - TOOLBAR
       /*
       Toolbar.setGlobalToolbar(true);
       Form hi = new Form("Toolbar", new BoxLayout(BoxLayout.Y_AXIS));
       Style s = UIManager.getInstance().getComponentStyle("Title_Command");
       FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_WARNING, s);
       hi.getToolbar().addCommandToLeftBar("Left", icon, (e) -> Log.p("Click"));
       hi.getToolbar().addCommandToRightBar("Right", icon, (e) -> Log.p("Click"));
       hi.getToolbar().addCommandToOverflowMenu("Overflow", icon, (e) -> Log.p("Click"));
       hi.getToolbar().addCommandToSideMenu("Side Menu", icon, (e) -> Log.p("Click"));
       hi.show();
*/
       
       //COMPONENTE - SIDE MENU
       /*
       final Form formA = new Form("Form A");
        formA.getToolbar().addMaterialCommandToSideMenu("Opção 1", FontImage.MATERIAL_EVENT, (e) -> {
           
        });
       
        formA.getToolbar().addMaterialCommandToSideMenu("Opção 2", FontImage.MATERIAL_EVENT, (e) -> {
           
        });
       
        formA.show();
*/
       /*
       Form hi = new Form("Swipe", new BoxLayout(BoxLayout.Y_AXIS));
        hi.add(contacto("David Luiz", "921345678")).
                add(contacto("Cristiano Ronaldo", "913123456")).
                add(contacto("Sérgio Ramos", "912345678"));
        hi.show();
*/
       
       

    }
    /*
     public SwipeableContainer contacto(String nome, String telefone) {
            MultiButton button = new MultiButton(nome);
            button.setTextLine2(telefone);
            Style s = UIManager.getInstance().getComponentStyle("Command List");
            FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_ACCOUNT_CIRCLE, s);
            button.setIcon(icon);
            return new SwipeableContainer(FlowLayout.encloseCenterMiddle(new Button("Eliminar"), new Button("Arquivar")), button);
     }
*/

    public void stop() {
        current = Display.getInstance().getCurrent();
    }
    
    public void destroy() {
    }

}
